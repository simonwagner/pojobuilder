{"name":"Pojobuilder","tagline":"A Java code generator for POJO builders","body":"PojoBuilder -  A code generator for POJO builders\r\n================================================= \r\n\r\nAuthor: Michael Karneim\r\n\r\nProject Homepage: http://github.com/mkarneim/pojobuilder\r\n\r\nAbout\r\n-----\r\n\r\nPojoBuilder is a Java 6 compliant annotation processor that generates a fluent builder class for POJOs (Plain Old Java Object). \r\n\r\nThe generated builder provides \r\n\r\n* a fluent interface for specifying values for the POJO's properties \r\n* and a \"build()\" method for creating a new POJO instance with these values.\r\n\r\nHere is an example of how you could use a generated POJO Builder from your code:\r\n\r\n\tContact james = new ContactBuilder()\r\n\t\t.withSurname(\"Bond\")\r\n\t\t.withFirstname(\"James\")\r\n\t\t.withEmail(\"007@secretservice.org\")\r\n\t\t.build()\r\n\r\nBuilders are quite useful, for example, to build test data, where you only want to set the relevant data properties.\r\n\r\nFor more information on \r\n\r\n* test data builders see http://c2.com/cgi/wiki?TestDataBuilder and http://www.natpryce.com/articles/000714.html.\r\n* the builder pattern see http://en.wikipedia.org/wiki/Builder_pattern. \r\n* fluent interface see http://www.martinfowler.com/bliki/FluentInterface.html\r\n\r\nDownload\r\n--------\r\n\r\nThe latest release is [PojoBuilder 2.0.0].\r\n\r\nYou can find older versions on the [archive page].\r\n\r\nLicense\r\n-------\r\n\r\nThe source code located in the \"src\" directory is in the PUBLIC DOMAIN. \r\nRead the [COPYING] file.\r\n\r\nDependencies\r\n------------\r\n\r\n* [Java] 6 \r\n* [ANTLR Parser Generator] 3.3 \r\n* [StringTemplate Template Engine] 4.0.4 \r\n\r\nExamples\r\n--------\r\nThe wiki provides some [best practices] about how you could use the pojobuilder generator.\r\n\r\nFor some complete code examples please have a look into the [samples] directory.\r\n\r\nHow To Use\r\n----------\r\n\r\nThe POJO Builder Annotation Processor will generate the builder class for you.\r\nYou have two options to activate it:\r\n\r\n* by annotating the POJO class\r\n* by annotating a factory method\r\n\r\n### Annotating the POJO ###\r\n\r\nTo generate a builder class for a POJO you can annotate its class with @GeneratePojoBuilder.\r\n\r\nLet's have a look at the following example POJO:\r\n\r\n\t@GeneratePojoBuilder(intoPackage = \"samples.builder\")\r\n\tpublic class Contact {\r\n\t\tprivate final String surname;\r\n\t\tprivate final String firstname;\r\n\t\tprivate String email;\r\n\t    \r\n\t\t@ConstructorProperties({\"surname\",\"firstname\"})\r\n\t\tpublic Contact(String aSurname, String aFirstname) {\r\n\t\t\tsuper();\r\n\t\t\tthis.surname = aSurname;\r\n\t\t\tthis.firstname = aFirstname;\r\n\t\t}\r\n\t\r\n\t\tpublic String getEmail() {\r\n\t\t\treturn email;\r\n\t\t}\r\n\t\r\n\t\tpublic void setEmail(String email) {\r\n\t\t\tthis.email = email;\r\n\t\t}\r\n\t\r\n\t\tpublic String getSurname() {\r\n\t\t\treturn surname;\r\n\t\t}\r\n\t\r\n\t\tpublic String getFirstname() {\r\n\t\t\treturn firstname;\r\n\t\t}\r\n\t}\r\n\r\nThe [@GeneratePojoBuilder] annotation tells the annotation processor to create a new Java source file with \r\nthe name \"ContactBuilder\" into the package \"samples.builder\" (the \"intoPackage\" attribute is optional). \r\nIf the POJO has no default constructor or if you want the generated builder to use a specific constructor \r\nthen annotate it with @ConstructorProperties and specify the mapping from the parameters to the corresponding properties.\r\n\r\nHave a look at [\"samples/src/generated/java/samples/builder/ContactBuilder.java\"] to see the generated source code.\r\n\r\n### Annotating a Factory Method ###\r\n\r\nAlternatively, if you can't modify the POJO's source code or if you don't \r\nlike annotating a POJO, you can annotate a factory method. \r\n\r\n\tpublic class PojoFactory {\r\n\t\r\n\t\t@GeneratePojoBuilder\r\n\t\t@PropertyNames({ \"firstname\", \"surname\" })\r\n\t\tpublic static Contact createContact(String aFirstname, String aSurname) {\r\n\t\t\tContact result = new Contact(aSurname, aFirstname);\r\n\t\t\treturn result;\r\n\t\t}\r\n\t}\r\n\r\nPlease note that the factory method must be *public* and *static*. \r\n\r\nIf it has parameters then you need to specify a mapping\r\nfrom the parameters to the corresponding POJO properties by using the @PropertyNames annotation.\r\n\r\nHave a look at [\"samples/src/generated/java/samples/with/factory/ContactBuilder.java\"] to see the generated source code.\r\n\r\n### Directives ###\r\nThe following attributes of the @GeneratePojoBuilder annotation can be used to influence the code generation process.\r\n\r\n* `withBaseclass=<Class>`\r\n    Specifies the base class of the generated builder. The default class is `Object.class`.\r\n* `withName=<String>`\r\n    Specifies the pattern of the builder's name. Any asterisk will be\r\n\treplaced with the pojos simple name. For example, the result of the pattern \"Fluent*Builder\" will become \r\n        \"FluentContactBuilder\" if the pojo's name is \"Contact\". The default pattern is `\"*Builder\"`.\r\n* `intoPackage=<String>`\r\n    Specifies the package of the generated builder. Any asterisk will be\r\n\treplaced with the pojos package. For example, the result of the pattern \"*.util\" will become\r\n        \"com.example.util\" if the pojo's package is \"com.example\". The default pattern is `\"*\"`.\r\n* `withGenerationGap=<boolean>`\r\n    Specifies whether the [generation gap pattern] is used. If enabled, this\r\n\twill generate two classes (instead of one), of which one contains the\r\n\tordinary builder code, whereas the other class extends the first one and is an empty template for handwritten code. \r\n        Please move it out of the generated-sources folder to prevent it from being overwritten. \r\n \tFor examples please see [\"samples/src/main/java/samples/with/generationgap\"] \r\n        and [\"samples/src/generated/java/samples/with/generationgap\"].\r\n        Default is `false`.\r\n\t\r\nExecution\r\n---------\r\n\r\nTo execute the annotation processor you either can\r\n\r\n* use the javac tool to compile your project. The option \"-processor net.karneim.pojobuilder.AnnotationProcessor\" will activate the processor.\r\n* use Ant's javac task (see below)\r\n* or add the PojoBuilder annotation processor to your Eclipse project configuration (see below)\r\n\r\nIn any case make sure that the pojobuilder-annotation-*.jar and it's dependend libraries are included in your project's classpath\r\nduring compile time.\r\nDuring runtime they are not required since the retention policy of PojoBuilder's annotations is SOURCE.\r\n\r\n### Using Ant\r\n\r\nHere is a code snippet of an ANT build script that runs the PojoBuilder annotation processor within the javac task. \r\n\r\n    <!-- Filesets and Classpaths  -->\r\n    <fileset id=\"libs.fileset\" dir=\"${lib.dir}\">\r\n        <include name=\"antlr-*.jar\" />\r\n        <include name=\"ST-*.jar\" />\r\n        <include name=\"pojobuilder-*.jar\" />\r\n        <!-- include any project specific libs here -->\r\n    </fileset>\r\n    \t\r\n    <path id=\"class.path\">\r\n        <fileset refid=\"libs.fileset\" />\r\n    </path>\r\n    \r\n    <target name=\"compile\" depends=\"init\" description=\"Compile java sources and run annotation processor\">\r\n    \t<mkdir dir=\"${src.gen.java.dir}\" />\r\n    \t<mkdir dir=\"${build.classes.dir}\" />\r\n    \t<javac classpathref=\"class.path\" destdir=\"${build.classes.dir}\">\r\n    \t\t<src path=\"${src.main.java.dir}\" />\r\n    \t\t<!-- This tells the compiler where to place the generated source files -->\r\n    \t\t<compilerarg line=\"-s ${src.gen.java.dir}\"/>\r\n    \t</javac>\r\n    </target>\r\n\r\n\r\nYou can find a complete sample build script at [\"samples/build.xml\"].\r\n\r\n### Using Eclipse\r\n\r\nDo the following to configure the PojoBuilder annotation processor for your project in Eclipse:\r\n\r\n* Place the PojoBuilder libraries (antlr-*.jar, ST-*.jar pojobuilder-*.jar) into your project library directory \r\n* Open your project's properties dialog\r\n* Navigate to \"Java Build Path\" tree node\r\n* Open the \"Libraries\" tab\r\n* Add the library pojobuilder-*.jar to your project classpath\r\n* Navigate to \"Java Compiler / Annotation Processing\" tree node\r\n* Check \"Enable project specific settings\"\r\n* Check \"Enable annotation processing\"\r\n* Check \"Enable processing in editor\"\r\n* Specify the target directory for the generated code in \"Generated source directory\"\r\n* Navigate to \"Java Compiler / Annotation Processing / Factory Path\" tree node\r\n* Check \"Enable project specific settings\"\r\n* Click \"Add JARs...\"\r\n* Add antlr-*.jar\r\n* Add ST-*.jar\r\n* Add pojobuilder-*.jar\r\n\r\nNow the annotation processor will be automatically invoked during the Eclipse build cycle.\r\n\r\nHow To Build\r\n------------\r\nIf you want to compile this project's sources yourself you can use Maven (see [pom.xml]) or Ant  (see [build.xml]). \r\n\r\n[PojoBuilder 2.0.0]: http://github.com/mkarneim/pojobuilder/raw/master/dist/pojobuilder-2.0.0.zip\r\n[archive page]: http://github.com/mkarneim/pojobuilder/archives/master\r\n[@GeneratePojoBuilder]: http://github.com/mkarneim/pojobuilder/blob/master/src/main/java/net/karneim/pojobuilder/GeneratePojoBuilder.java\r\n[samples]: http://github.com/mkarneim/pojobuilder/blob/master/samples\r\n[best practices]: http://github.com/mkarneim/pojobuilder/wiki/Best-practices\r\n[COPYING]: http://github.com/mkarneim/pojobuilder/blob/master/COPYING\r\n[build.xml]: http://github.com/mkarneim/pojobuilder/blob/master/build.xml\r\n[pom.xml]: http://github.com/mkarneim/pojobuilder/blob/master/pom.xml\r\n[\"samples/build.xml\"]: http://github.com/mkarneim/pojobuilder/blob/master/samples/build.xml\r\n[\"samples/src/generated/java/samples/builder/ContactBuilder.java\"]: http://github.com/mkarneim/pojobuilder/blob/master/samples/src/generated/java/samples/builder/ContactBuilder.java\r\n[\"samples/src/generated/java/samples/with/factory/ContactBuilder.java\"]: http://github.com/mkarneim/pojobuilder/blob/master/samples/src/generated/java/samples/with/factory/ContactBuilder.java\r\n[generation gap pattern]: http://martinfowler.com/dslCatalog/generationGap.html\r\n[\"samples/src/main/java/samples/with/generationgap\"]: http://github.com/mkarneim/pojobuilder/blob/master/samples/src/main/java/samples/with/generationgap/\r\n[\"samples/src/generated/java/samples/with/generationgap\"]: http://github.com/mkarneim/pojobuilder/blob/master/samples/src/generated/java/samples/with/generationgap/\r\n[Java]: http://www.oracle.com/technetwork/java/\r\n[ANTLR Parser Generator]: http://www.antlr.org/\r\n[StringTemplate Template Engine]: http://www.stringtemplate.org/\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}